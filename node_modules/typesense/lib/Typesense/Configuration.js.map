{"version":3,"sources":["Typesense/Configuration.js"],"names":["Configuration","options","masterNode","host","port","path","protocol","hasOwnProperty","readReplicaNodes","length","map","node","timeoutSeconds","_isNodeMissingAnyParameters","Error","_validateReadReplicaNodes","some","every","key","module","exports"],"mappings":"AAAA;;;;;;IAEMA,a;AACJ,2BAA2B;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AACzB,SAAKC,UAAL,GAAkBD,QAAQC,UAAR,IAAsB;AACtCC,YAAM,WADgC;AAEtCC,YAAM,MAFgC;AAGtCC,YAAM,EAHgC;AAItCC,gBAAU;AAJ4B,KAAxC;AAMA,QAAI,CAAC,KAAKJ,UAAL,CAAgBK,cAAhB,CAA+B,MAA/B,CAAL,EAA6C;AAC3C,WAAKL,UAAL,CAAgBG,IAAhB,GAAuB,EAAvB;AACD;;AAED,SAAKG,gBAAL,GAAwBP,QAAQO,gBAAR,IAA4B,EAApD;AACA,QAAI,KAAKA,gBAAL,CAAsBC,MAA1B,EAAkC;AAChC,WAAKD,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBE,GAAtB,CAA0B,UAACC,IAAD,EAAU;AAC1D,YAAI,CAACA,KAAKJ,cAAL,CAAoB,MAApB,CAAL,EAAkC;AAChCI,eAAKN,IAAL,GAAY,EAAZ;AACD;AACD,eAAOM,IAAP;AACD,OALuB,CAAxB;AAMD;AACD,SAAKC,cAAL,GAAsBX,QAAQW,cAAR,IAA0B,EAAhD;AACD;;;;+BAEW;AACV,UAAI,KAAKC,2BAAL,CAAiC,KAAKX,UAAtC,CAAJ,EAAuD;AACrD,cAAM,IAAIY,KAAJ,CAAU,2CAAV,CAAN;AACD;;AAED,UAAI,KAAKC,yBAAL,EAAJ,EAAsC;AACpC,cAAM,IAAID,KAAJ,CAAU,wDAAV,CAAN;AACD;AACF;;;gDAE4B;AAAA;;AAC3B,aAAO,KAAKN,gBAAL,CAAsBQ,IAAtB,CAA2B,UAACL,IAAD,EAAU;AAC1C,eAAO,MAAKE,2BAAL,CAAiCF,IAAjC,CAAP;AACD,OAFM,CAAP;AAGD;;;gDAE4BA,I,EAAM;AACjC,aAAO,CAAC,CAAC,UAAD,EAAa,MAAb,EAAqB,MAArB,EAA6B,MAA7B,EAAqC,QAArC,EAA+CM,KAA/C,CAAqD,UAACC,GAAD,EAAS;AACpE,eAAOP,KAAKJ,cAAL,CAAoBW,GAApB,CAAP;AACD,OAFO,CAAR;AAGD;;;;;;AAGHC,OAAOC,OAAP,GAAiBpB,aAAjB","file":"Configuration.js","sourcesContent":["'use strict'\n\nclass Configuration {\n  constructor (options = {}) {\n    this.masterNode = options.masterNode || {\n      host: 'localhost',\n      port: '8108',\n      path: '',\n      protocol: 'http'\n    }\n    if (!this.masterNode.hasOwnProperty('path')) {\n      this.masterNode.path = ''\n    }\n\n    this.readReplicaNodes = options.readReplicaNodes || []\n    if (this.readReplicaNodes.length) {\n      this.readReplicaNodes = this.readReplicaNodes.map((node) => {\n        if (!node.hasOwnProperty('path')) {\n          node.path = ''\n        }\n        return node\n      })\n    }\n    this.timeoutSeconds = options.timeoutSeconds || 10\n  }\n\n  validate () {\n    if (this._isNodeMissingAnyParameters(this.masterNode)) {\n      throw new Error('Missing required parameters in masterNode')\n    }\n\n    if (this._validateReadReplicaNodes()) {\n      throw new Error('Missing required parameters in one of readReplicaNodes')\n    }\n  }\n\n  _validateReadReplicaNodes () {\n    return this.readReplicaNodes.some((node) => {\n      return this._isNodeMissingAnyParameters(node)\n    })\n  }\n\n  _isNodeMissingAnyParameters (node) {\n    return !['protocol', 'host', 'port', 'path', 'apiKey'].every((key) => {\n      return node.hasOwnProperty(key)\n    })\n  }\n}\n\nmodule.exports = Configuration\n"]}