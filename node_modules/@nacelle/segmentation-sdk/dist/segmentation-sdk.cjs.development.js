'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var axios = _interopDefault(require('axios'));

// A type of promise-like that resolves synchronously and supports only one observer

const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== "undefined" ? (Symbol.iterator || (Symbol.iterator = Symbol("Symbol.iterator"))) : "@@iterator";

const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== "undefined" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol("Symbol.asyncIterator"))) : "@@asyncIterator";

// Asynchronously call a function and send errors to recovery continuation
function _catch(body, recover) {
	try {
		var result = body();
	} catch(e) {
		return recover(e);
	}
	if (result && result.then) {
		return result.then(void 0, recover);
	}
	return result;
}

var isBrowser = typeof window !== 'undefined';
var initialPosition = {
  coords: {
    accuracy: 0,
    altitude: null,
    altitudeAccuracy: null,
    heading: null,
    latitude: 0,
    longitude: 0,
    speed: null
  },
  timestamp: 0
};
var initialLocation = {
  lat: '',
  lon: '',
  address: {
    country_code: ''
  }
};
var initialPositionOptions = {
  enableHighAccuracy: true,
  maximumAge: 30000,
  timeout: 27000
};
var Localizer = /*#__PURE__*/function () {
  function Localizer(config) {
    if (config === void 0) {
      config = {};
    }

    this.navigator = {};
    this.position = initialPosition;
    this.locale = '';
    this.userAgent = '';
    this.ip = '';
    this.location = initialLocation;
    this.positionOptions = initialPositionOptions;

    this.returnPositionCallback = function (localizer) {
      return function (newPosition) {
        localizer.position = newPosition;
      };
    };

    this.positionErrorCallback = function (error) {
      console.log(error);
    };

    this.locale = config.defaultLocale || 'en-US';

    if (isBrowser) {
      this.navigator = config.navigator || window.navigator;
    }

    if (config.positionOptions) {
      this.positionOptions = config.positionOptions;
    }
  }

  var _proto = Localizer.prototype;

  _proto.getPosition = function getPosition() {
    try {
      var _this2 = this;

      return Promise.resolve(_catch(function () {
        if (!isBrowser || !(_this2.navigator && _this2.navigator.geolocation)) {
          throw new Error('Cannot get position outside of browser');
        }

        return Promise.resolve(_this2.navigator.geolocation.getCurrentPosition(_this2.returnPositionCallback(_this2), _this2.positionErrorCallback, _this2.positionOptions)).then(function () {
          return _this2.position;
        });
      }, function (error) {
        throw new Error("Error: Navigator unable to retrieve position. \n " + error);
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  }
  /**
   * getLocation
   * --
   * Policy:
   * https://operations.osmfoundation.org/policies/nominatim/
   * --
   * @param lat
   * @param lon
   * @return {Location}
   */
  ;

  _proto.getLocation = function getLocation(lat, lon) {
    try {
      var _this4 = this;

      if (lat === undefined && lon === undefined && _this4.position.timestamp > 0) {
        lat = _this4.position.coords.latitude;
        lon = _this4.position.coords.longitude;
      }

      return Promise.resolve(_catch(function () {
        var urlBase = "https://nominatim.openstreetmap.org/reverse";
        var query = "?format=json&lat=" + lat + "&lon=" + lon;
        return Promise.resolve(axios.get("" + urlBase + query)).then(function (_ref) {
          var data = _ref.data;
          _this4.location = data;
          return data;
        });
      }, function (error) {
        throw new Error("Error: Nomination unable to retrieve location. \n " + error);
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.getIp = function getIp() {
    try {
      var _this6 = this;

      return Promise.resolve(_catch(function () {
        return Promise.resolve(axios.get('https://www.cloudflare.com/cdn-cgi/trace')).then(function (_ref2) {
          var data = _ref2.data;

          var parsedData = _this6.parsePlainTextData(data);

          _this6.ip = parsedData.ip;
          _this6.location.address.country_code = parsedData.loc.toLowerCase();
          _this6.userAgent = parsedData.uag;
          return parsedData;
        });
      }, function (error) {
        throw new Error("Error: Cloudflare unable to retrieve IP. \n " + error);
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.getLocale = function getLocale() {
    if (!isBrowser || !(this.navigator && this.navigator.languages)) {
      throw new Error('Cannot get locale outside of browser');
    }

    this.locale = this.navigator.languages[0];
    return this.locale;
  };

  _proto.getUserAgent = function getUserAgent() {
    if (!isBrowser || !(this.navigator && this.navigator.userAgent)) {
      throw new Error('Cannot get useragent outside of browser');
    }

    this.userAgent = this.navigator.userAgent;
    return this.userAgent;
  }
  /**
   * parsePlainTextData
   * ---
   * Converts plain text data to object
   * ---
   * @param plainText - Expects ~ 'ip=98.176.246.69\nloc=US`
   *
   * Adpoted from this answer:
   * https://stackoverflow.com/questions/17774266/read-env-file-and-convert-all-lines-into-an-object#answer-17774334
   */
  ;

  _proto.parsePlainTextData = function parsePlainTextData(plainText) {
    var data = {};
    plainText.replace(/(\w+)=(.+)/g, function (_, key, value) {
      return data[key] = value;
    });
    return data;
  };

  return Localizer;
}();

exports.Localizer = Localizer;
//# sourceMappingURL=segmentation-sdk.cjs.development.js.map
