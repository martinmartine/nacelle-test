const path = require('path')
const nacelleBuild = require('./build')
const { registerAttributionEvents } = require('./utils/registerAttributionEvents')
import NacelleClient from '@nacelle/client-js-sdk'

module.exports = async function (moduleOptions) {
  const options = {
    ...this.options.nacelle,
    ...moduleOptions,
    locale: this.options.nacelle.locale || 'en-us',
    endpoint:
      this.options.nacelle.customEndpoint ||
      'https://hailfrequency.com/v2/graphql'
  }

  // Create Client
  let client

  if (
    this.options &&
    this.options.nacelle &&
    this.options.nacelle.buildClient
  ) {
    client = this.options.nacelle.buildClient
  } else {
    client = new NacelleClient({
      id: this.options.nacelle.spaceID,
      token: this.options.nacelle.token,
      locale: options.defaultLocale,
      nacelleEndpoint: options.endpoint,
      useStatic: false
    })
  }

  registerAttributionEvents(client)
  // Read space data
  const space = await client.data.space()

  // Add $nacelle plugin
  this.addPlugin({
    src: path.resolve(__dirname, './plugins/dollar-nacelle.js'),
    filename: 'dollar-nacelle.js',
    options: {
      settings: options,
      space
    }
  })

  // install nacelle vuex stores
  this.addPlugin({
    src: path.resolve(__dirname, './plugins/vuex-store-plugin.js'),
    filename: 'vuex-store-plugin.js',
    options
  })

  // install google analytics
  if (options.gaID && options.gaID !== 'undefined') {
    this.addPlugin({
      src: path.resolve(__dirname, './plugins/google-analytics.client.js'),
      options: {
        id: options.gaID
      }
    })
  }

  // install facebook pixel tracking
  if (options.fbID && options.fbID !== 'undefined') {
    this.addPlugin({
      src: path.resolve(__dirname, './plugins/facebook-pixel.client.js'),
      options: {
        id: options.fbID
      }
    })
  }

  if (
    this.options &&
    this.options.nacelle &&
    !this.options.nacelle.skipPrefetch
  ) {
    this.nuxt.hook('build:before', async () => {
      await nacelleBuild.init({
        buildDir: this.options.srcDir,
        routeConfig: this.options.nacelle.routeConfig || {},
        searchDataTypes: this.options.nacelle.searchDataTypes || [],
        client,
        space
      })
    })
  }

  this.nuxt.hook('generate:extendRoutes', async (routes) => {
    // get route and payload data
    const nacelleRoutes = await nacelleBuild.getNuxtGenerateRoutes({
      buildDir: this.options.srcDir,
      locale: options.locale
    })
    const hook = this.options.nacelle.extendRoutes
    let extendRoutes = nacelleRoutes

    // pass nacelle generated routes through optional hook
    if (hook && typeof hook === 'function') {
      extendRoutes = await hook(nacelleRoutes)
    }

    // update routes array
    extendRoutes.forEach((route) => {
      routes.push(route)
    })
  })

  this.nuxt.hook('generate:routeCreated', ({ errors }) => {
    if (errors && errors.length > 0) {
      nacelleBuild.handleBuildError(
        'generate:routeCreated Error. Aborting build',
        errors
      )
    }
  })

  this.nuxt.hook('generate:done', ({ errors }) => {
    if (errors && errors.length > 0) {
      nacelleBuild.handleBuildError(
        'generate:done Error. Aborting build',
        errors
      )
    }
  })
}

module.exports.meta = require('../package.json')
