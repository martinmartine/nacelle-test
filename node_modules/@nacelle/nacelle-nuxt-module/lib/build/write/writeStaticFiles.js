import writeData from '../../utils/writeData'
import getDataItemWritePath from '../../utils/getDataItemWritePath'
import resetDirectory from '../../utils/resetDirectory'
import createSearchDataObject from '../../utils/createSearchDataObject'

const EMPTY_OBJECT = {
  noData: true
}

// Take the space data and write it to json files saved in the Nuxt project's
// static directory. Also create a json file with an array of routes to be used
// during Nuxt Generate.
export default async ({
  staticDir,
  space,
  searchDataTypes,
  searchDataLimit,
  siteData
}) => {
  const items = siteData

  console.log('\x1B[36m', 'Òˆ', '\x1B[0m', 'Writing space data...')

  resetDirectory(staticDir)

  // Save space data
  writeData(`${staticDir}/space.json`, space)

  if (items && items.length > 0) {
    // Save search json
    const searchDataObject = createSearchDataObject({
      items,
      searchDataTypes,
      limit: searchDataLimit
    })

    writeData(`${staticDir}/search.json`, searchDataObject)

    // Save json data
    items.forEach(item => {
      if (item) {
        const writePath = getDataItemWritePath(item)
        const fullPath = `${staticDir}/${writePath}/static.json`

        if (item.payload) {
          // Write the API data to static file
          writeData(fullPath, item.payload)
        } else {
          // If no data we still Write an empty file so we know not
          // to query the api on the front end
          writeData(fullPath, EMPTY_OBJECT)
        }
      }
    })
    // ---

    // Create a json file of all the routes needed for Nuxt Generate
    const routeObjects = items.map(item => {
      const obj = {
        route: item.route,
        handle: item.handle,
        type: item.type
      }

      if (item.type === 'article') {
        obj.blogHandle = item.blogHandle
      }

      return obj
    })

    writeData(`${staticDir}/routes.json`, routeObjects)
    // ---

    return true
  }

  throw new Error('No data to write.')
}
