'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var axios = _interopDefault(require('axios'));

// A type of promise-like that resolves synchronously and supports only one observer
const _Pact = /*#__PURE__*/(function() {
	function _Pact() {}
	_Pact.prototype.then = function(onFulfilled, onRejected) {
		const result = new _Pact();
		const state = this.s;
		if (state) {
			const callback = state & 1 ? onFulfilled : onRejected;
			if (callback) {
				try {
					_settle(result, 1, callback(this.v));
				} catch (e) {
					_settle(result, 2, e);
				}
				return result;
			} else {
				return this;
			}
		}
		this.o = function(_this) {
			try {
				const value = _this.v;
				if (_this.s & 1) {
					_settle(result, 1, onFulfilled ? onFulfilled(value) : value);
				} else if (onRejected) {
					_settle(result, 1, onRejected(value));
				} else {
					_settle(result, 2, value);
				}
			} catch (e) {
				_settle(result, 2, e);
			}
		};
		return result;
	};
	return _Pact;
})();

// Settles a pact synchronously
function _settle(pact, state, value) {
	if (!pact.s) {
		if (value instanceof _Pact) {
			if (value.s) {
				if (state & 1) {
					state = value.s;
				}
				value = value.v;
			} else {
				value.o = _settle.bind(null, pact, state);
				return;
			}
		}
		if (value && value.then) {
			value.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));
			return;
		}
		pact.s = state;
		pact.v = value;
		const observer = pact.o;
		if (observer) {
			observer(pact);
		}
	}
}

function _isSettledPact(thenable) {
	return thenable instanceof _Pact && thenable.s & 1;
}

// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)
function _forTo(array, body, check) {
	var i = -1, pact, reject;
	function _cycle(result) {
		try {
			while (++i < array.length && (!check || !check())) {
				result = body(i);
				if (result && result.then) {
					if (_isSettledPact(result)) {
						result = result.v;
					} else {
						result.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));
						return;
					}
				}
			}
			if (pact) {
				_settle(pact, 1, result);
			} else {
				pact = result;
			}
		} catch (e) {
			_settle(pact || (pact = new _Pact()), 2, e);
		}
	}
	_cycle();
	return pact;
}

const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== "undefined" ? (Symbol.iterator || (Symbol.iterator = Symbol("Symbol.iterator"))) : "@@iterator";

// Asynchronously iterate through an object's values
// Uses for...of if the runtime supports it, otherwise iterates until length on a copy
function _forOf(target, body, check) {
	if (typeof target[_iteratorSymbol] === "function") {
		var iterator = target[_iteratorSymbol](), step, pact, reject;
		function _cycle(result) {
			try {
				while (!(step = iterator.next()).done && (!check || !check())) {
					result = body(step.value);
					if (result && result.then) {
						if (_isSettledPact(result)) {
							result = result.v;
						} else {
							result.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));
							return;
						}
					}
				}
				if (pact) {
					_settle(pact, 1, result);
				} else {
					pact = result;
				}
			} catch (e) {
				_settle(pact || (pact = new _Pact()), 2, e);
			}
		}
		_cycle();
		if (iterator.return) {
			var _fixup = function(value) {
				try {
					if (!step.done) {
						iterator.return();
					}
				} catch(e) {
				}
				return value;
			};
			if (pact && pact.then) {
				return pact.then(_fixup, function(e) {
					throw _fixup(e);
				});
			}
			_fixup();
		}
		return pact;
	}
	// No support for Symbol.iterator
	if (!("length" in target)) {
		throw new TypeError("Object is not iterable");
	}
	// Handle live collections properly
	var values = [];
	for (var i = 0; i < target.length; i++) {
		values.push(target[i]);
	}
	return _forTo(values, function(i) { return body(values[i]); }, check);
}

const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== "undefined" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol("Symbol.asyncIterator"))) : "@@asyncIterator";

// Asynchronously implement a do ... while loop
function _do(body, test) {
	var awaitBody;
	do {
		var result = body();
		if (result && result.then) {
			if (_isSettledPact(result)) {
				result = result.v;
			} else {
				awaitBody = true;
				break;
			}
		}
		var shouldContinue = test();
		if (_isSettledPact(shouldContinue)) {
			shouldContinue = shouldContinue.v;
		}
		if (!shouldContinue) {
			return result;
		}
	} while (!shouldContinue.then);
	const pact = new _Pact();
	const reject = _settle.bind(null, pact, 2);
	(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);
	return pact;
	function _resumeAfterBody(value) {
		result = value;
		for (;;) {
			shouldContinue = test();
			if (_isSettledPact(shouldContinue)) {
				shouldContinue = shouldContinue.v;
			}
			if (!shouldContinue) {
				break;
			}
			if (shouldContinue.then) {
				shouldContinue.then(_resumeAfterTest).then(void 0, reject);
				return;
			}
			result = body();
			if (result && result.then) {
				if (_isSettledPact(result)) {
					result = result.v;
				} else {
					result.then(_resumeAfterBody).then(void 0, reject);
					return;
				}
			}
		}
		_settle(pact, 1, result);
	}
	function _resumeAfterTest(shouldContinue) {
		if (shouldContinue) {
			do {
				result = body();
				if (result && result.then) {
					if (_isSettledPact(result)) {
						result = result.v;
					} else {
						result.then(_resumeAfterBody).then(void 0, reject);
						return;
					}
				}
				shouldContinue = test();
				if (_isSettledPact(shouldContinue)) {
					shouldContinue = shouldContinue.v;
				}
				if (!shouldContinue) {
					_settle(pact, 1, result);
					return;
				}
			} while (!shouldContinue.then);
			shouldContinue.then(_resumeAfterTest).then(void 0, reject);
		} else {
			_settle(pact, 1, result);
		}
	}
}

// Asynchronously call a function and send errors to recovery continuation
function _catch(body, recover) {
	try {
		var result = body();
	} catch(e) {
		return recover(e);
	}
	if (result && result.then) {
		return result.then(void 0, recover);
	}
	return result;
}

var NacelleData = /*#__PURE__*/function () {
  function NacelleData(params) {
    this.connector = params.connector;
    this.locale = params.locale || 'en-us';
    this.currencyCode = params.currencyCode || 'USD';
    this.afterSubscriptions = [];
    this.onDataError = null;

    if (params.onDataError) {
      this.onDataError = params.onDataError;
    }

    this.connector.updateDefaults({
      locale: this.locale
    });
  }

  var _proto = NacelleData.prototype;

  _proto.update = function update(params) {
    if (params.connector) {
      this.connector = params.connector;
    }

    if (params.locale) {
      this.locale = params.locale;
      this.connector.updateDefaults({
        locale: this.locale
      });
    }

    if (params.currencyCode) {
      this.currencyCode = params.currencyCode;
    }

    if (typeof params.onDataError !== 'undefined') {
      this.onDataError = params.onDataError;
    }
  };

  _proto.product = function product(params, connector) {
    try {
      var _this2 = this;

      return Promise.resolve(_catch(function () {
        function _temp2() {
          return _this2.applyAfter('product', product);
        }

        var product;

        var _temp = function () {
          if (connector) {
            return Promise.resolve(connector.product(params)).then(function (_connector$product) {
              product = _connector$product;
            });
          } else {
            return Promise.resolve(_this2.connector.product(params)).then(function (_this$connector$produ) {
              product = _this$connector$produ;
            });
          }
        }();

        return _temp && _temp.then ? _temp.then(_temp2) : _temp2(_temp);
      }, function (error) {
        if (_this2.onDataError) {
          return _this2.onDataError({
            method: 'product',
            params: params,
            error: error
          });
        }

        throw error;
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.products = function products(params, connector) {
    try {
      var _this4 = this;

      return Promise.resolve(_catch(function () {
        function _temp4() {
          return _this4.applyAfter('products', products);
        }

        var products;

        var _temp3 = function () {
          if (connector) {
            return Promise.resolve(connector.products(params)).then(function (_connector$products) {
              products = _connector$products;
            });
          } else {
            return Promise.resolve(_this4.connector.products(params)).then(function (_this3$connector$prod) {
              products = _this3$connector$prod;
            });
          }
        }();

        return _temp3 && _temp3.then ? _temp3.then(_temp4) : _temp4(_temp3);
      }, function (error) {
        if (_this4.onDataError) {
          return _this4.onDataError({
            method: 'products',
            params: params,
            error: error
          });
        }

        throw error;
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.collection = function collection(params, connector) {
    try {
      var _this6 = this;

      return Promise.resolve(_catch(function () {
        function _temp6() {
          return _this6.applyAfter('collection', collection);
        }

        var collection;

        var _temp5 = function () {
          if (connector) {
            return Promise.resolve(connector.collection(params)).then(function (_connector$collection) {
              collection = _connector$collection;
            });
          } else {
            return Promise.resolve(_this6.connector.collection(params)).then(function (_this5$connector$coll) {
              collection = _this5$connector$coll;
            });
          }
        }();

        return _temp5 && _temp5.then ? _temp5.then(_temp6) : _temp6(_temp5);
      }, function (error) {
        if (_this6.onDataError) {
          return _this6.onDataError({
            method: 'collection',
            params: params,
            error: error
          });
        }

        throw error;
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.collectionPage = function collectionPage(params, connector) {
    try {
      var _this8 = this;

      return Promise.resolve(_catch(function () {
        function _temp8() {
          return _this8.applyAfter('collectionPage', products);
        }

        var products;

        var _temp7 = function () {
          if (connector) {
            return Promise.resolve(connector.collectionPage(params)).then(function (_connector$collection2) {
              products = _connector$collection2;
            });
          } else {
            return Promise.resolve(_this8.connector.collectionPage(params)).then(function (_this7$connector$coll) {
              products = _this7$connector$coll;
            });
          }
        }();

        return _temp7 && _temp7.then ? _temp7.then(_temp8) : _temp8(_temp7);
      }, function (error) {
        if (_this8.onDataError) {
          return _this8.onDataError({
            method: 'collectionPage',
            params: params,
            error: error
          });
        }

        throw error;
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.content = function content(params, connector) {
    try {
      var _this10 = this;

      return Promise.resolve(_catch(function () {
        function _temp10() {
          return _this10.applyAfter('content', content);
        }

        var content;

        var _temp9 = function () {
          if (connector) {
            return Promise.resolve(connector.content(params)).then(function (_connector$content) {
              content = _connector$content;
            });
          } else {
            return Promise.resolve(_this10.connector.content(params)).then(function (_this9$connector$cont) {
              content = _this9$connector$cont;
            });
          }
        }();

        return _temp9 && _temp9.then ? _temp9.then(_temp10) : _temp10(_temp9);
      }, function (error) {
        if (_this10.onDataError) {
          return _this10.onDataError({
            method: 'content',
            params: params,
            error: error
          });
        }

        throw error;
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.page = function page(params, connector) {
    try {
      var _this12 = this;

      return Promise.resolve(_catch(function () {
        function _temp12() {
          return _this12.applyAfter('page', page);
        }

        var page;

        var _temp11 = function () {
          if (connector) {
            return Promise.resolve(connector.page(params)).then(function (_connector$page) {
              page = _connector$page;
            });
          } else {
            return Promise.resolve(_this12.connector.page(params)).then(function (_this11$connector$pag) {
              page = _this11$connector$pag;
            });
          }
        }();

        return _temp11 && _temp11.then ? _temp11.then(_temp12) : _temp12(_temp11);
      }, function (error) {
        if (_this12.onDataError) {
          return _this12.onDataError({
            method: 'page',
            params: params,
            error: error
          });
        }

        throw error;
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.pages = function pages(params, connector) {
    try {
      var _this14 = this;

      return Promise.resolve(_catch(function () {
        function _temp14() {
          return _this14.applyAfter('pages', pages);
        }

        var pages;

        var _temp13 = function () {
          if (connector) {
            return Promise.resolve(connector.pages(params)).then(function (_connector$pages) {
              pages = _connector$pages;
            });
          } else {
            return Promise.resolve(_this14.connector.pages(params)).then(function (_this13$connector$pag) {
              pages = _this13$connector$pag;
            });
          }
        }();

        return _temp13 && _temp13.then ? _temp13.then(_temp14) : _temp14(_temp13);
      }, function (error) {
        if (_this14.onDataError) {
          return _this14.onDataError({
            method: 'pages',
            params: params,
            error: error
          });
        }

        throw error;
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.article = function article(params, connector) {
    try {
      var _this16 = this;

      return Promise.resolve(_catch(function () {
        function _temp16() {
          return _this16.applyAfter('article', article);
        }

        var article;

        var _temp15 = function () {
          if (connector) {
            return Promise.resolve(connector.article(params)).then(function (_connector$article) {
              article = _connector$article;
            });
          } else {
            return Promise.resolve(_this16.connector.article(params)).then(function (_this15$connector$art) {
              article = _this15$connector$art;
            });
          }
        }();

        return _temp15 && _temp15.then ? _temp15.then(_temp16) : _temp16(_temp15);
      }, function (error) {
        if (_this16.onDataError) {
          return _this16.onDataError({
            method: 'article',
            params: params,
            error: error
          });
        }

        throw error;
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.articles = function articles(params, connector) {
    try {
      var _this18 = this;

      return Promise.resolve(_catch(function () {
        function _temp18() {
          return _this18.applyAfter('articles', articles);
        }

        var articles;

        var _temp17 = function () {
          if (connector) {
            return Promise.resolve(connector.articles(params)).then(function (_connector$articles) {
              articles = _connector$articles;
            });
          } else {
            return Promise.resolve(_this18.connector.articles(params)).then(function (_this17$connector$art) {
              articles = _this17$connector$art;
            });
          }
        }();

        return _temp17 && _temp17.then ? _temp17.then(_temp18) : _temp18(_temp17);
      }, function (error) {
        if (_this18.onDataError) {
          return _this18.onDataError({
            method: 'articles',
            params: params,
            error: error
          });
        }

        throw error;
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.blog = function blog(params, connector) {
    try {
      var _this20 = this;

      return Promise.resolve(_catch(function () {
        function _temp20() {
          return _this20.applyAfter('blog', blog);
        }

        var blog;

        var _temp19 = function () {
          if (connector) {
            return Promise.resolve(connector.blog(params)).then(function (_connector$blog) {
              blog = _connector$blog;
            });
          } else {
            return Promise.resolve(_this20.connector.blog(params)).then(function (_this19$connector$blo) {
              blog = _this19$connector$blo;
            });
          }
        }();

        return _temp19 && _temp19.then ? _temp19.then(_temp20) : _temp20(_temp19);
      }, function (error) {
        if (_this20.onDataError) {
          return _this20.onDataError({
            method: 'blog',
            params: params,
            error: error
          });
        }

        throw error;
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.blogPage = function blogPage(params, connector) {
    try {
      var _this22 = this;

      return Promise.resolve(_catch(function () {
        function _temp22() {
          return _this22.applyAfter('blogPage', articles);
        }

        var articles;

        var _temp21 = function () {
          if (connector) {
            return Promise.resolve(connector.blogPage(params)).then(function (_connector$blogPage) {
              articles = _connector$blogPage;
            });
          } else {
            return Promise.resolve(_this22.connector.blogPage(params)).then(function (_this21$connector$blo) {
              articles = _this21$connector$blo;
            });
          }
        }();

        return _temp21 && _temp21.then ? _temp21.then(_temp22) : _temp22(_temp21);
      }, function (error) {
        if (_this22.onDataError) {
          return _this22.onDataError({
            method: 'blogPage',
            params: params,
            error: error
          });
        }

        throw error;
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.space = function space(connector) {
    try {
      var _this24 = this;

      return Promise.resolve(_catch(function () {
        function _temp24() {
          return _this24.applyAfter('space', space);
        }

        var space;

        var _temp23 = function () {
          if (connector) {
            return Promise.resolve(connector.space()).then(function (_connector$space) {
              space = _connector$space;
            });
          } else {
            return Promise.resolve(_this24.connector.space()).then(function (_this23$connector$spa) {
              space = _this23$connector$spa;
            });
          }
        }();

        return _temp23 && _temp23.then ? _temp23.then(_temp24) : _temp24(_temp23);
      }, function (error) {
        if (_this24.onDataError) {
          return _this24.onDataError({
            method: 'space',
            params: {},
            error: error
          });
        }

        throw error;
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.allProducts = function allProducts(params, connector) {
    try {
      var _this26 = this;

      return Promise.resolve(_catch(function () {
        function _temp26() {
          return _this26.applyAfter('allProducts', products);
        }

        var products;

        var _temp25 = function () {
          if (connector) {
            return Promise.resolve(connector.allProducts(params)).then(function (_connector$allProduct) {
              products = _connector$allProduct;
            });
          } else {
            return Promise.resolve(_this26.connector.allProducts(params)).then(function (_this25$connector$all) {
              products = _this25$connector$all;
            });
          }
        }();

        return _temp25 && _temp25.then ? _temp25.then(_temp26) : _temp26(_temp25);
      }, function (error) {
        if (_this26.onDataError) {
          return _this26.onDataError({
            method: 'allProducts',
            params: params,
            error: error
          });
        }

        throw error;
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.allCollections = function allCollections(params, connector) {
    try {
      var _this28 = this;

      return Promise.resolve(_catch(function () {
        function _temp28() {
          return _this28.applyAfter('allCollections', collections);
        }

        var collections;

        var _temp27 = function () {
          if (connector) {
            return Promise.resolve(connector.allCollections(params)).then(function (_connector$allCollect) {
              collections = _connector$allCollect;
            });
          } else {
            return Promise.resolve(_this28.connector.allCollections(params)).then(function (_this27$connector$all) {
              collections = _this27$connector$all;
            });
          }
        }();

        return _temp27 && _temp27.then ? _temp27.then(_temp28) : _temp28(_temp27);
      }, function (error) {
        if (_this28.onDataError) {
          return _this28.onDataError({
            method: 'allCollections',
            params: params,
            error: error
          });
        }

        throw error;
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.allContent = function allContent(params, connector) {
    try {
      var _exit2 = false;

      var _this30 = this;

      return Promise.resolve(_catch(function () {
        function _temp30(_result) {
          return _exit2 ? _result : _this30.applyAfter('allContent', content);
        }

        var content;

        var _temp29 = function () {
          if (connector) {
            return Promise.resolve(connector.allContent(params)).then(function (_connector$allContent) {
              content = _connector$allContent;
            });
          } else {
            _exit2 = true;
            return _this30.connector.allContent(params);
          }
        }();

        return _temp29 && _temp29.then ? _temp29.then(_temp30) : _temp30(_temp29);
      }, function (error) {
        if (_this30.onDataError) {
          return _this30.onDataError({
            method: 'allContent',
            params: params,
            error: error
          });
        }

        throw error;
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.after = function after(method, callback) {
    this.afterSubscriptions.push({
      method: method,
      callback: callback
    });
  };

  _proto.applyAfter = function applyAfter(method, responseObj) {
    try {
      var _this32 = this;

      var response = responseObj;

      var subs = _this32.afterSubscriptions.filter(function (sub) {
        return sub.method === method;
      });

      var _temp32 = _forOf(subs, function (sub) {
        return Promise.resolve(sub.callback(response)).then(function (_sub$callback) {
          response = _sub$callback;
        });
      });

      return Promise.resolve(_temp32 && _temp32.then ? _temp32.then(function () {
        return response;
      }) : response);
    } catch (e) {
      return Promise.reject(e);
    }
  };

  return NacelleData;
}();

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var HttpClientAxios = /*#__PURE__*/function () {
  function HttpClientAxios(options) {
    this.client = axios.create(_extends({
      responseType: 'json',
      headers: {
        'Content-Type': 'application/json'
      },
      timeout: 240000,
      maxContentLength: 524328890
    }, options));
  }

  var _proto = HttpClientAxios.prototype;

  _proto.get = function get(url) {
    return this.client.get(url);
  };

  _proto.post = function post(url, data) {
    return this.client.post(url, data);
  };

  return HttpClientAxios;
}();

var NacelleConnector = /*#__PURE__*/function () {
  function NacelleConnector(params) {
    this.apiClient = params && params.httpClient ? params.httpClient : new HttpClientAxios();
    this.locale = params && params.locale ? params.locale : 'en-us';
  }

  var _proto = NacelleConnector.prototype;

  _proto.updateDefaults = function updateDefaults(params) {
    if (params && params.locale) {
      this.locale = params.locale;
    }
  };

  _proto.product = function product(_options) {
    try {
      throw new Error('The default NacelleConnector does not return a product');
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.products = function products(_options) {
    try {
      throw new Error('The default NacelleConnector does not return products');
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.collection = function collection(_options) {
    try {
      throw new Error('The default NacelleConnector does not return a collection');
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.collectionPage = function collectionPage(_options) {
    try {
      throw new Error('The default NacelleConnector does not return a collection page');
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.content = function content(_options) {
    try {
      throw new Error('This NacelleConnector does not return a content item');
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.page = function page(_options) {
    try {
      throw new Error('This NacelleConnector does not return a page item');
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.pages = function pages(_options) {
    try {
      throw new Error('This NacelleConnector does not return pages');
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.blog = function blog(_options) {
    try {
      throw new Error('This NacelleConnector does not return a blog');
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.article = function article(_options) {
    try {
      throw new Error('This NacelleConnector does not return an article');
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.articles = function articles(_options) {
    try {
      throw new Error('This NacelleConnector does not return an article');
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.blogPage = function blogPage(_options) {
    try {
      throw new Error('This NacelleConnector does not return a blog page');
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.space = function space() {
    try {
      throw new Error('This NacelleConnector does not return a space');
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.allProducts = function allProducts(_options) {
    try {
      throw new Error('This NacelleConnector does not return all products');
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.allCollections = function allCollections(_options) {
    try {
      throw new Error('This NacelleConnector does not return all collections');
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.allContent = function allContent(_options) {
    try {
      throw new Error('This NacelleConnector does not return all content');
    } catch (e) {
      return Promise.reject(e);
    }
  };

  return NacelleConnector;
}();

var getList = (function (selectedList, lists) {
  if (selectedList === void 0) {
    selectedList = 'default';
  }

  var selected = lists.find(function (_ref) {
    var slug = _ref.slug;
    return slug === selectedList;
  });

  if (selected !== undefined) {
    return selected;
  } else {
    throw new Error('No default product list found');
  }
});

var getListHandles = (function (lists, options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      paginate = _options.paginate,
      selectedList = _options.selectedList,
      _options$index = _options.index,
      index = _options$index === void 0 ? 0 : _options$index,
      _options$itemsPerPage = _options.itemsPerPage,
      itemsPerPage = _options$itemsPerPage === void 0 ? 30 : _options$itemsPerPage;
  var list = getList(selectedList, lists);

  if (list && list.handles) {
    if (paginate) {
      return list.handles.slice(index, index + itemsPerPage);
    }

    return list.handles;
  }

  throw new Error('Selected list does not have array of handles');
});

var createProduct = function createProduct(options) {
  var product = _extends({
    id: '',
    handle: '',
    locale: 'en-us',
    globalHandle: '',
    pimSyncSourceDomain: '',
    title: '',
    description: '',
    priceRange: {
      min: '0.0',
      max: '0.0',
      currencyCode: 'USD'
    },
    availableForSale: true,
    tags: [],
    media: [],
    metafields: [],
    variants: [],
    indexedAt: 0
  }, options);

  return product;
};

var createMedia = function createMedia(options) {
  return _extends({
    id: '',
    type: 'image',
    src: '',
    thumbnailSrc: '',
    altText: ''
  }, options);
};

var createItemList = function createItemList(obj) {
  var list = _extends({
    title: '',
    slug: 'default',
    locale: 'en-us',
    handles: []
  }, obj);

  return list;
};

var createCollection = function createCollection(obj) {
  var productLists = obj.productLists,
      featuredMedia = obj.featuredMedia,
      rest = _objectWithoutPropertiesLoose(obj, ["productLists", "featuredMedia"]);

  var collection = _extends({
    id: '',
    handle: '',
    locale: 'en-us',
    globalHandle: '',
    pimSyncSourceDomain: '',
    productLists: [],
    featuredMedia: null
  }, rest, {
    metafields: obj.metafields || []
  });

  if (productLists && Array.isArray(productLists)) {
    collection.productLists = productLists.map(function (list) {
      return createItemList(list);
    });
  }

  if (featuredMedia) {
    collection.featuredMedia = createMedia(featuredMedia);
  }

  return collection;
};

var createFieldsFromTags = (function (tags) {
  if (Array.isArray(tags)) {
    var tagFields = tags.reduce(function (fields, tag) {
      if (tag.includes('field::')) {
        var _tag$split = tag.split('::'),
            key = _tag$split[1],
            value = _tag$split[2];

        fields[key] = value;
      }

      return fields;
    }, {});
    return _extends({}, tagFields);
  }

  return {};
});

var mapContentSections = function mapContentSections(sections, cmsSyncSource) {
  var formattedSections = typeof sections === 'string' ? JSON.parse(sections) : sections;

  if (Array.isArray(formattedSections)) {
    return formattedSections.map(function (section) {
      if (section.tags) {
        var fieldTags = createFieldsFromTags(section.tags);
        return _extends({}, section, fieldTags, {
          cmsSyncSource: cmsSyncSource
        });
      }

      return _extends({}, section, {
        cmsSyncSource: cmsSyncSource
      });
    });
  }

  return [];
};

var createContent = function createContent(obj) {
  var articleLists = obj.articleLists,
      featuredMedia = obj.featuredMedia,
      sections = obj.sections,
      rest = _objectWithoutPropertiesLoose(obj, ["articleLists", "featuredMedia", "sections"]);

  var content = _extends({
    id: '',
    handle: '',
    locale: '',
    globalHandle: '',
    cmsSyncSource: '',
    cmsSyncSourceDomain: '',
    cmsSyncSourceContentId: '',
    type: 'content',
    indexedAt: 0,
    articleLists: null,
    featuredMedia: null,
    relatedArticles: []
  }, rest);

  if (sections) {
    content.sections = mapContentSections(sections, content.cmsSyncSource);
  }

  if (articleLists && Array.isArray(articleLists)) {
    content.articleLists = articleLists.map(function (list) {
      return createItemList(list);
    });
  }

  if (featuredMedia) {
    content.featuredMedia = createMedia(featuredMedia);
  }

  return content;
};

var createSpace = function createSpace(obj) {
  var id = obj.id,
      name = obj.name,
      domain = obj.domain,
      linklists = obj.linklists,
      metafields = obj.metafields;
  var space = {
    id: id || '',
    name: name || '',
    domain: domain || '',
    linklists: Array.isArray(linklists) ? linklists : [],
    metafields: Array.isArray(metafields) ? metafields : []
  };
  return space;
};

var mediaFragment = "\n  id\n  thumbnailSrc\n  src\n  type\n  altText\n";

var metafieldFragment = "\n  id\n  namespace\n  key\n  value\n";

var productFragment = "\n  id\n  handle\n  locale\n  globalHandle\n  pimSyncSource\n  pimSyncSourceDomain\n  pimSyncSourceProductId\n  title\n  description\n  priceRange {\n    min\n    max\n    currencyCode\n  }\n  productType\n  media {\n    " + mediaFragment + "\n  }\n  featuredMedia {\n    " + mediaFragment + "\n  }\n  availableForSale\n  vendor\n  tags\n  createdAt\n  metafields {\n    " + metafieldFragment + "\n  }\n  indexedAt\n  variants {\n    id\n    title\n    price\n    priceCurrency\n    compareAtPrice\n    compareAtPriceCurrency\n    swatchSrc\n    selectedOptions {\n      name\n      value\n    }\n    featuredMedia {\n      " + mediaFragment + "\n    }\n    sku\n    availableForSale\n    metafields {\n      " + metafieldFragment + "\n    }\n    weight\n    weightUnit\n    priceRules {\n      id\n      handle\n      title\n      price\n      priceCurrency\n      comparedAtPrice\n       metafields {\n          " + metafieldFragment + "\n        }\n      priceBreaks {\n        quantityMin\n        quantityMax\n        price\n        metafields {\n          " + metafieldFragment + "\n        }\n      }\n      availableTo\n    }\n  }\n";

var getProductsQuery = "\nquery getProducts($first: Int, $after: String) {\n  getProducts(first: $first, after: $after) {\n    items {\n      " + productFragment + "\n    }\n    nextToken\n  }\n}\n";

var collectionFragment = "\n  id\n  handle\n  globalHandle\n  locale\n  pimSyncSourceDomain\n  pimSyncSource\n  pimSyncSourceCollectionId\n  title\n  description\n  metafields {\n    " + metafieldFragment + "\n  }\n  featuredMedia {\n    " + mediaFragment + "\n  }\n  productLists {\n    title\n    slug\n    locale\n    handles\n  }\n";

var getCollectionsQuery = "\nquery getCollections($first: Int, $after: String) {\n  getCollections(first: $first, after: $after) {\n    nextToken\n    items {\n      " + collectionFragment + "\n    }\n  }\n}\n";

var getContentQuery = "\nquery getContent($first: Int, $after: String) {\n  getContent(first: $first, after: $after) {\n    nextToken\n    items {\n      id\n      handle\n      locale\n      globalHandle\n      cmsSyncSource\n      cmsSyncSourceDomain\n      cmsSyncSourceContentId\n      type\n      indexedAt\n      title\n      description\n      sections\n      tags\n      fields\n      articleLists {\n        title\n        slug\n        locale\n        handles\n      }\n      relatedArticles {\n        handle\n        title\n        blogHandle\n        cmsSyncSourceContentId\n        locale\n        createdAt\n        updatedAt\n        author {\n          firstName\n          lastName\n          bio\n          email\n        }\n        featuredMedia {\n          " + mediaFragment + "\n        }\n        publishDate\n        description\n        excerpt\n        tags\n      }\n      collectionHandle\n      content\n      contentHtml\n      excerpt\n      blogHandle\n      featuredMedia {\n        " + mediaFragment + "\n      }\n      publishDate\n      author {\n        firstName\n        lastName\n        bio\n        email\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}";

var getSpaceQuery = "\nquery GetSpace {\n  getSpace {\n    id\n    name\n    domain\n    metafields {\n      namespace\n      key\n      value\n    }\n    linklists {\n      handle\n      links {\n        title\n        to\n        type\n        links {\n          title\n          to\n          type\n          links {\n            title\n            to\n            type\n          }\n        }\n      }\n    }\n  }\n}";

var getCheckoutQuery = "\nquery getCheckout($id: ID!, $url: String!) {\n  getCheckout(id: $id, url: $url) {\n    id\n    url\n    completed\n  }\n}\n";

var getVariantAvailabilityQuery = "\nquery GetVariantAvailability($productId: String!, $variantId: String!) {\n  getVariantAvailability(productId: $productId, variantId: $variantId)\n}\n";

var processCheckoutMutation = "\nmutation processCheckout($input: CheckoutInput) {\n  processCheckout(input: $input) {\n    id\n    url\n    completed\n  }\n}\n";

var getProductByHandleQuery = "\nquery getProductByHandle($handle: String!, $locale: String) {\n  getProductByHandle(handle: $handle, locale: $locale) {\n    " + productFragment + "\n  }\n}\n";

var getCollectionByHandleQuery = "\nquery getCollectionByHandle($handle: String!, $locale: String) {\n  getCollectionByHandle(handle: $handle, locale: $locale) {\n    " + collectionFragment + "\n  }\n}\n";

var getContentByHandleQuery = "\nquery getContentByHandle($type: String!, $handle: String!, $locale: String, $blogHandle: String) {\n  getContentByHandle(type: $type, handle: $handle, locale: $locale, blogHandle: $blogHandle) {\n    id\n    handle\n    locale\n    globalHandle\n    cmsSyncSource\n    cmsSyncSourceDomain\n    cmsSyncSourceContentId\n    type\n    indexedAt\n    title\n    description\n    sections\n    tags\n    fields\n    articleLists {\n      title\n      slug\n      locale\n      handles\n    }\n    relatedArticles {\n      handle\n      title\n      blogHandle\n      cmsSyncSourceContentId\n      locale\n      createdAt\n      updatedAt\n      author {\n        firstName\n        lastName\n        bio\n        email\n      }\n      featuredMedia {\n        id\n        type\n        src\n        thumbnailSrc\n        altText\n      }\n      publishDate\n      description\n      excerpt\n      tags\n    }\n    collectionHandle\n    content\n    contentHtml\n    excerpt\n    blogHandle\n    featuredMedia {\n      id\n      type\n      src\n      thumbnailSrc\n      altText\n    }\n    publishDate\n    author {\n      firstName\n      lastName\n      bio\n      email\n    }\n    createdAt\n    updatedAt\n  }\n}";

var NacelleGraphQLConnector = /*#__PURE__*/function (_NacelleConnector) {
  _inheritsLoose(NacelleGraphQLConnector, _NacelleConnector);

  function NacelleGraphQLConnector(params) {
    var _this;

    _this = _NacelleConnector.call(this, params) || this;

    if (typeof params.endpoint === 'undefined' || params.endpoint === null || params.endpoint === '') {
      throw new Error('NacelleGraphQLConnector requires a valid endpoint.');
    }

    if (typeof params.spaceId === 'undefined' || params.spaceId === null || params.spaceId === '') {
      throw new Error('NacelleGraphQLConnector requires a valid Nacelle space id.');
    }

    if (typeof params.token === 'undefined' || params.token === null || params.token === '') {
      throw new Error('NacelleGraphQLConnector requires a valid Nacelle space API token.');
    }

    _this.endpoint = params.endpoint;
    _this.spaceId = params.spaceId;
    _this.token = params.token;
    _this.apiClient = params && params.httpClient ? params.httpClient : new HttpClientAxios({
      headers: {
        'Content-Type': 'application/json',
        'x-nacelle-space-id': _this.spaceId,
        'x-nacelle-space-token': _this.token
      }
    });
    return _this;
  }

  var _proto = NacelleGraphQLConnector.prototype;

  _proto.request = function request(query, queryName, variables) {
    try {
      var _this3 = this;

      return Promise.resolve(_catch(function () {
        var data = {
          query: query,
          variables: variables
        };
        return Promise.resolve(_this3.apiClient.post(_this3.endpoint, data)).then(function (response) {
          if (response) {
            if (response.data && Array.isArray(response.data.errors) && response.data.errors.length > 0) {
              var firstError = response.data.errors.pop();

              if (firstError && firstError.message) {
                throw new Error(firstError.message);
              }

              throw new Error("Unknown graphql error attempting " + queryName);
            }

            if (response.data.data && typeof response.data.data[queryName] !== 'undefined') {
              return {
                success: true,
                data: response.data.data[queryName]
              };
            } else {
              throw new Error("Response did not include " + queryName + ".\n            " + JSON.stringify(response.data, null, 2));
            }
          }

          throw new Error("No valid response from " + queryName);
        });
      }, function (error) {
        return {
          success: false,
          error: error.message,
          data: null
        };
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.getAllPageItems = function getAllPageItems(params) {
    try {
      var _temp3 = function _temp3() {
        return pages.reduce(function (arr, page) {
          if (page && page.items && page.items.length > 0) {
            return arr.concat(page.items);
          }

          return arr;
        }, []);
      };

      var _this5 = this;

      var after = '';
      var pages = [];

      var _temp4 = _do(function () {
        return Promise.resolve(_this5.request(params.query, params.queryName, {
          first: params.first || 500,
          after: after
        })).then(function (response) {
          if (response.success && response.data) {
            var page = response.data;
            pages.push(page);
            after = page.nextToken;
          } else {
            after = '';
          }
        });
      }, function () {
        return after !== '';
      });

      return Promise.resolve(_temp4 && _temp4.then ? _temp4.then(_temp3) : _temp3(_temp4));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.product = function product(options) {
    try {
      var _this7 = this;

      var query = getProductByHandleQuery;
      return Promise.resolve(_this7.request(query, 'getProductByHandle', {
        handle: options.handle,
        locale: options.locale || 'en-us'
      })).then(function (response) {
        if (response.success && response.data) {
          return createProduct(response.data);
        }

        throw new Error(response.error);
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.products = function products(options) {
    try {
      var _this9 = this;

      var handles = options.handles,
          locale = options.locale;
      var useLocale = locale || _this9.locale;
      var requests = handles.map(function (handle) {
        return _this9.product({
          handle: handle,
          locale: useLocale
        })["catch"](function () {
          return undefined;
        });
      });
      return Promise.resolve(Promise.all(requests)).then(function (responses) {
        var successes = responses.reduce(function (arr, response) {
          if (response) {
            arr.push(response);
          }

          return arr;
        }, []);
        return successes;
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.collection = function collection(options) {
    try {
      var _this11 = this;

      var query = getCollectionByHandleQuery;
      return Promise.resolve(_this11.request(query, 'getCollectionByHandle', {
        handle: options.handle,
        locale: options.locale || 'en-us'
      })).then(function (response) {
        if (response.success && response.data) {
          return createCollection(response.data);
        }

        throw new Error(response.error);
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.collectionPage = function collectionPage(options) {
    try {
      var _temp7 = function _temp7(_result2) {
        if (_exit2) return _result2;
        var handles = getListHandles(collection.productLists, {
          selectedList: list,
          paginate: typeof paginate !== 'undefined' ? paginate : false,
          index: index,
          itemsPerPage: itemsPerPage
        });
        return _this13.products({
          handles: handles,
          locale: locale
        });
      };

      var _exit2 = false;

      var _this13 = this;

      var handle = options.handle,
          locale = options.locale,
          list = options.list,
          paginate = options.paginate,
          index = options.index,
          itemsPerPage = options.itemsPerPage;
      var collection = options.collection;

      var _temp8 = function () {
        if (typeof collection === 'undefined') {
          return function () {
            if (handle && handle.length > 0) {
              return Promise.resolve(_this13.collection({
                handle: handle,
                locale: locale
              })).then(function (_this12$collection) {
                collection = _this12$collection;
              });
            } else {
              throw new Error('A collection or handle is required');
            }
          }();
        }
      }();

      return Promise.resolve(_temp8 && _temp8.then ? _temp8.then(_temp7) : _temp7(_temp8));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.content = function content(_ref) {
    var handle = _ref.handle,
        _ref$type = _ref.type,
        type = _ref$type === void 0 ? 'page' : _ref$type,
        locale = _ref.locale,
        _ref$blogHandle = _ref.blogHandle,
        blogHandle = _ref$blogHandle === void 0 ? 'blog' : _ref$blogHandle;

    try {
      var _this15 = this;

      var useLocale = locale || _this15.locale;
      var query = getContentByHandleQuery;
      return Promise.resolve(_this15.request(query, 'getContentByHandle', {
        type: type,
        handle: handle,
        locale: useLocale,
        blogHandle: blogHandle
      })).then(function (response) {
        if (response.success && response.data) {
          return createContent(response.data);
        }

        throw new Error(response.error);
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.page = function page(options) {
    return this.content({
      handle: options.handle,
      type: 'page',
      locale: options.locale
    });
  };

  _proto.pages = function pages(options) {
    try {
      var _this17 = this;

      var handles = options.handles,
          locale = options.locale;
      var useLocale = locale || _this17.locale;
      var requests = handles.map(function (handle) {
        return _this17.content({
          type: 'page',
          handle: handle,
          locale: useLocale
        })["catch"](function () {
          return undefined;
        });
      });
      return Promise.resolve(Promise.all(requests)).then(function (responses) {
        var successes = responses.reduce(function (arr, response) {
          if (response) {
            arr.push(response);
          }

          return arr;
        }, []);
        return successes;
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.blog = function blog(options) {
    return this.content({
      handle: options.handle,
      type: 'blog',
      locale: options.locale
    });
  };

  _proto.article = function article(options) {
    return this.content({
      handle: options.handle,
      type: 'article',
      locale: options.locale,
      blogHandle: options.blogHandle || 'blog'
    });
  };

  _proto.articles = function articles(options) {
    try {
      var _this19 = this;

      var handles = options.handles,
          locale = options.locale,
          blogHandle = options.blogHandle;
      var useLocale = locale || _this19.locale;
      var requests = handles.map(function (handle) {
        return _this19.article({
          handle: handle,
          blogHandle: blogHandle,
          locale: useLocale
        })["catch"](function () {
          return undefined;
        });
      });
      return Promise.resolve(Promise.all(requests)).then(function (responses) {
        var successes = responses.reduce(function (arr, response) {
          if (response) {
            arr.push(response);
          }

          return arr;
        }, []);
        return successes;
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.blogPage = function blogPage(options) {
    try {
      var _temp11 = function _temp11(_result4) {
        if (_exit4) return _result4;

        if (blog.articleLists) {
          var handles = getListHandles(blog.articleLists, {
            selectedList: list,
            paginate: typeof paginate !== 'undefined' ? paginate : false,
            index: index,
            itemsPerPage: itemsPerPage
          });
          return _this21.articles({
            handles: handles,
            locale: locale,
            blogHandle: handle || blog.handle
          });
        }

        return [];
      };

      var _exit4 = false;

      var _this21 = this;

      var handle = options.handle,
          locale = options.locale,
          list = options.list,
          paginate = options.paginate,
          index = options.index,
          itemsPerPage = options.itemsPerPage;
      var blog = options.blog;

      var _temp12 = function () {
        if (typeof blog === 'undefined') {
          return function () {
            if (handle && handle.length > 0) {
              return Promise.resolve(_this21.blog({
                handle: handle,
                locale: locale
              })).then(function (_this20$blog) {
                blog = _this20$blog;
              });
            } else {
              throw new Error('A blog or handle is required');
            }
          }();
        }
      }();

      return Promise.resolve(_temp12 && _temp12.then ? _temp12.then(_temp11) : _temp11(_temp12));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.allProducts = function allProducts(params) {
    try {
      var _this23 = this;

      var query = getProductsQuery;
      return Promise.resolve(_this23.getAllPageItems({
        query: query,
        queryName: 'getProducts',
        first: params && params.limit ? params.limit : 2000
      })).then(function (products) {
        return products.map(function (product) {
          return createProduct(product);
        });
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.allCollections = function allCollections(params) {
    try {
      var _this25 = this;

      var query = getCollectionsQuery;
      return Promise.resolve(_this25.getAllPageItems({
        query: query,
        queryName: 'getCollections',
        first: params && params.limit ? params.limit : 2000
      })).then(function (collections) {
        return collections.map(function (collection) {
          return createCollection(collection);
        });
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.allContent = function allContent(params) {
    try {
      var _this27 = this;

      var query = getContentQuery;
      return Promise.resolve(_this27.getAllPageItems({
        query: query,
        queryName: 'getContent',
        first: params && params.limit ? params.limit : 2000
      })).then(function (content) {
        return content.map(function (entry) {
          return createContent(entry);
        });
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.space = function space() {
    try {
      var _this29 = this;

      var query = getSpaceQuery;
      return Promise.resolve(_this29.request(query, 'getSpace')).then(function (response) {
        if (response) {
          if (response.success && response.data) {
            return createSpace(response.data);
          }

          if (response && !response.success && response.error) {
            throw new Error(response.error);
          }
        }

        throw new Error('Invalid response attempting getSpace query');
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.processCheckout = function processCheckout(params) {
    try {
      var _this31 = this;

      var query = processCheckoutMutation;
      return Promise.resolve(_this31.request(query, 'processCheckout', {
        input: _extends({}, params)
      })).then(function (response) {
        if (response) {
          if (response.success && response.data) {
            return response.data;
          }

          if (response && !response.success && response.error) {
            throw new Error(response.error);
          }
        }

        throw new Error('Invalid response attempting processCheckout mutation');
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.queryCheckout = function queryCheckout(params) {
    try {
      var _this33 = this;

      var query = getCheckoutQuery;
      return Promise.resolve(_this33.request(query, 'getCheckout', _extends({}, params))).then(function (response) {
        if (response) {
          if (response.success && response.data) {
            return response.data;
          }

          if (response && !response.success && response.error) {
            throw new Error(response.error);
          }
        }

        throw new Error('Invalid response attempting getCheckout query');
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.isVariantAvailable = function isVariantAvailable(params) {
    try {
      var _this35 = this;

      var query = getVariantAvailabilityQuery;
      return Promise.resolve(_this35.request(query, 'getVariantAvailability', _extends({}, params))).then(function (response) {
        if (response) {
          if (response.success && typeof response.data !== 'undefined' && response.data !== null) {
            return response.data;
          }

          if (response && !response.success && response.error) {
            throw new Error(response.error);
          }
        }

        throw new Error('Invalid response attempting getVariantAvailability query');
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  return NacelleGraphQLConnector;
}(NacelleConnector);

var NacelleCheckout = /*#__PURE__*/function () {
  function NacelleCheckout(params) {
    if (params.connector) {
      this.connector = params.connector;
    } else if (params.endpoint && params.spaceId && params.token) {
      this.connector = new NacelleGraphQLConnector({
        endpoint: params.endpoint,
        spaceId: params.spaceId,
        token: params.token
      });
    } else {
      throw new Error('Missing parameters to initialize checkout module');
    }
  }

  var _proto = NacelleCheckout.prototype;

  _proto.process = function process(params) {
    return this.connector.processCheckout(params);
  };

  _proto.get = function get(params) {
    if (typeof params.id === 'undefined' || params.id.length === 0) {
      throw new Error('Missing parameter "id". Querying for a checkout requires a checkout Id.');
    }

    if (typeof params.url === 'undefined' || params.url.length === 0) {
      throw new Error('Missing parameter "url". Querying for a checkout requires a checkout url.');
    }

    return this.connector.queryCheckout(params);
  };

  return NacelleCheckout;
}();

var NacelleStatus = /*#__PURE__*/function () {
  function NacelleStatus(params) {
    if (params.connector) {
      this.connector = params.connector;
    } else if (params.endpoint && params.spaceId && params.token) {
      this.connector = new NacelleGraphQLConnector({
        endpoint: params.endpoint,
        spaceId: params.spaceId,
        token: params.token
      });
    } else {
      throw new Error('Missing parameters to initialize checkout module');
    }
  }

  var _proto = NacelleStatus.prototype;

  _proto.isVariantAvailable = function isVariantAvailable(params) {
    return this.connector.isVariantAvailable(params);
  };

  return NacelleStatus;
}();

var getWishlistsByCustomerSourceIdQuery = "\n  query getWishlistsByCustomerSourceId ($customerId: String!, $first: Int, $nextToken: String) {\n    getWishlistsByCustomerSourceId (customerId: $customerId, first: $first, nextToken: $nextToken) {\n      items {\n        id,\n        customerSourceId,\n        title\n        \n        items {\n          variantId\n          handle\n        }\n      }\n      nextToken\n    }\n  }\n";

var putWishlistMutation = "\n  mutation putWishlist ($input: WishlistInput!) {\n    putWishlist (input: $input) {\n      id,\n      customerSourceId,\n      items {\n        variantId\n        handle\n      }\n    }\n  }\n";

var NacelleWishlist = /*#__PURE__*/function () {
  function NacelleWishlist(params) {
    if (params && params.endpoint && params.endpoint.length > 0) {
      this.endpoint = params.endpoint;
    } else if (process && process.env && process.env.NACELLE_WISHLIST_ENDPOINT && process.env.NACELLE_WISHLIST_ENDPOINT.length > 0) {
      this.endpoint = process.env.NACELLE_WISHLIST_ENDPOINT;
    } else {
      // Set default Wishlist endpoint
      this.endpoint = 'https://wishlist.hailfrequency.com/graphql';
    }

    var axiosOptions = {
      headers: {
        'Content-Type': 'application/json',
        'X-Nacelle-Space-Id': params.spaceId,
        'X-Nacelle-Space-Token': params.token
      }
    };
    this.apiClient = params && params.httpClient ? params.httpClient : new HttpClientAxios(axiosOptions);
  }

  var _proto = NacelleWishlist.prototype;

  _proto.put = function put(params) {
    return this.apiClient.post(this.endpoint, {
      query: putWishlistMutation,
      variables: {
        input: _extends({}, params)
      }
    });
  };

  _proto.get = function get(params) {
    return this.apiClient.post(this.endpoint, {
      query: getWishlistsByCustomerSourceIdQuery,
      variables: params
    });
  };

  return NacelleWishlist;
}();

var EventType;

(function (EventType) {
  EventType["productView"] = "productView";
  EventType["search"] = "search";
  EventType["productRecommendation"] = "productRecommendation";
  EventType["pageView"] = "pageView";
  EventType["collectionView"] = "collectionView";
  EventType["blogView"] = "blogView";
  EventType["articleView"] = "articleView";
  EventType["cartAdd"] = "cartAdd";
  EventType["cartRemove"] = "cartRemove";
  EventType["checkoutInit"] = "checkoutInit";
  EventType["checkoutComplete"] = "checkoutComplete";
})(EventType || (EventType = {}));

var NacelleEvents = /*#__PURE__*/function () {
  function NacelleEvents(params) {
    if (params && params.endpoint && params.endpoint.length > 0) {
      this.endpoint = params.endpoint;
    } else if (process && process.env && process.env.NACELLE_TEM_ENDPOINT && process.env.NACELLE_TEM_ENDPOINT.length > 0) {
      this.endpoint = process.env.NACELLE_TEM_ENDPOINT;
    } else {
      // Set default TEM endpoint
      this.endpoint = 'https://tem.hailfrequency.com/events/add';
    }

    this.apiClient = params && params.httpClient ? params.httpClient : new HttpClientAxios();

    if (params && typeof params.disable !== 'undefined') {
      this.disable = params.disable;
    } else {
      this.disable = false;
    }

    this.subscriptions = [];
    this.attributionEvents = {};
  }

  var _proto = NacelleEvents.prototype;

  _proto.log = function log(eventInput) {
    if (this.disable) {
      return;
    }

    updateSessionEventCount();

    var event = _extends({}, eventInput, {
      user: _extends({
        device: getDevice()
      }, eventInput.user)
    }, getUrlParts(eventInput.url), getGlobalEventData());

    var getAttributionData = this.attributionEvents[event.eventType];

    if (getAttributionData) {
      setGlobalEventData({
        attributionType: event.eventType,
        attributionData: getAttributionData(event)
      });
    }

    var modifiedEvent = this.subscriptions.filter(function (_ref) {
      var eventType = _ref.eventType;
      return event.eventType === eventType || eventType === '*';
    }).filter(function (_ref2) {
      var callback = _ref2.callback;
      return !!callback;
    }).map(function (_ref3) {
      var callback = _ref3.callback;
      return callback(event);
    }).reduce(function (acc, cur) {
      return _extends({}, acc, cur);
    }, {});

    var eventToSend = _extends({}, event, modifiedEvent);

    this.apiClient.post(this.endpoint, eventToSend);
  };

  _proto.onAttributionEvent = function onAttributionEvent(eventType, getAttributionData) {
    this.attributionEvents[eventType] = getAttributionData;
  };

  _proto.onEvent = function onEvent(eventType, callback) {
    this.subscriptions.push({
      eventType: eventType,
      callback: callback
    });
  };

  return NacelleEvents;
}();

var getDevice = function getDevice() {
  var globalScope = getGlobalScope();
  var device = globalScope && globalScope.navigator && globalScope.navigator.userAgent ? globalScope.navigator.userAgent.toLowerCase() : 'unknown';
  return device;
};

var getUrlParts = function getUrlParts(url) {
  var globalScope = getGlobalScope();
  var href = globalScope && globalScope.location && globalScope.location.href;
  var parsedUrl = tryCatch(function () {
    return new URL(url || '');
  }, function () {
    return tryCatch(function () {
      return new URL(href || '');
    }, function () {
      return undefined;
    });
  });
  var urlParams = parsedUrl ? parsedUrl.search.replace(/^\?/g, '').split('&').filter(function (x) {
    return !!x && x.length;
  }) : [];
  return {
    url: parsedUrl ? parsedUrl.toString() : '',
    domain: parsedUrl ? parsedUrl.hostname : '',
    route: parsedUrl ? parsedUrl.pathname : '',
    urlParams: urlParams
  };
};

var getGlobalScope = function getGlobalScope() {
  var globalScope = tryCatch( // eslint-disable-next-line no-undef
  function () {
    return globalThis;
  }, function () {
    return tryCatch(function () {
      return window;
    }, function () {
      return tryCatch(function () {
        return global;
      }, function () {
        return undefined;
      });
    });
  });
  return globalScope;
};

var getGlobalEventData = function getGlobalEventData() {
  var globalScope = getGlobalScope();
  var eventData = globalScope && globalScope.nacelleEventData || {};
  return eventData;
};

var setGlobalEventData = function setGlobalEventData(data) {
  var globalScope = getGlobalScope();

  if (!globalScope) {
    return;
  }

  globalScope.nacelleEventData = _extends({}, globalScope.nacelleEventData, data);
};

var updateSessionEventCount = function updateSessionEventCount() {
  var globalEventData = getGlobalEventData();
  setGlobalEventData({
    sessionEventCount: (globalEventData.sessionEventCount || 0) + 1
  });
};

var tryCatch = function tryCatch(tryFunc, catchFunc) {
  try {
    return tryFunc();
  } catch (error) {
    return catchFunc(error);
  }
};

var constructDataPathPrefix = (function (prefix, parentHandle) {
  if (parentHandle === undefined || parentHandle === null) {
    parentHandle = '';
  } else {
    parentHandle = parentHandle + "/";
  }

  switch (prefix) {
    case 'collection':
      return "data/collections/" + parentHandle;

    case 'page':
      return "data/pages/" + parentHandle;

    case 'product':
      return "data/products/" + parentHandle;

    case 'shop':
      return "data/shop/" + parentHandle;

    case 'article':
      return "data/articles/" + parentHandle;

    case 'blog':
      return "data/blogs/" + parentHandle;

    default:
      return "data/content/" + parentHandle;
  }
});

var defaultTypes = ['product', 'collection', 'page', 'blog', 'article', 'content'];
var DELIMITER = '--';
var constructDataPath = (function (params) {
  var formattedLocal = params.locale.toLowerCase().replace('_', '-');
  var path = "" + params.handle + DELIMITER + formattedLocal;

  if (defaultTypes.indexOf(params.type) === -1) {
    path = "" + path + DELIMITER + params.type;
  }

  var prefix = constructDataPathPrefix(params.type, params.parentHandle);
  return "" + prefix + path + "/static.json";
});

var NacelleStaticConnector = /*#__PURE__*/function (_NacelleConnector) {
  _inheritsLoose(NacelleStaticConnector, _NacelleConnector);

  function NacelleStaticConnector(params) {
    var _this;

    _this = _NacelleConnector.call(this, params) || this;
    _this.basePath = params && params.basePath ? params.basePath : '/';
    return _this;
  }

  var _proto = NacelleStaticConnector.prototype;

  _proto.request = function request(path) {
    try {
      var _this3 = this;

      var url = "" + _this3.basePath + path;
      return Promise.resolve(_catch(function () {
        return Promise.resolve(_this3.apiClient.get(url)).then(function (response) {
          if (response && response.data && response.headers && response.headers['content-type'].includes('application/json')) {
            return {
              success: true,
              data: response.data
            };
          }

          throw new Error("Unable to find static resource at " + url);
        });
      }, function (error) {
        return {
          success: false,
          error: error.message,
          data: null
        };
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.requestMany = function requestMany(paths) {
    try {
      var _this5 = this;

      var requests = paths.map(function (path) {
        return _this5.request(path);
      });
      return Promise.resolve(Promise.all(requests)).then(function (responses) {
        var successes = responses.reduce(function (arr, response) {
          if (response.success && response.data) {
            arr.push(response.data);
          }

          return arr;
        }, []);
        return successes;
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.product = function product(options) {
    try {
      var _this7 = this;

      return Promise.resolve(_catch(function () {
        var handle = options.handle,
            locale = options.locale;
        var useLocale = locale || _this7.locale;
        var path = constructDataPath({
          type: 'product',
          handle: handle,
          locale: useLocale
        });
        return Promise.resolve(_this7.request(path)).then(function (response) {
          if (response.success && response.data) {
            return createProduct(response.data);
          }

          throw new Error(response.error);
        });
      }, function (error) {
        if (_this7.onError) {
          return _this7.onError({
            method: 'product',
            params: options,
            error: error
          });
        }

        throw error;
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.products = function products(options) {
    try {
      var _this9 = this;

      var handles = options.handles,
          locale = options.locale;
      var useLocale = locale || _this9.locale;
      var requests = handles.map(function (handle) {
        return _this9.product({
          handle: handle,
          locale: useLocale
        })["catch"](function () {
          return undefined;
        });
      });
      return Promise.resolve(Promise.all(requests)).then(function (responses) {
        var successes = responses.reduce(function (arr, response) {
          if (response) {
            arr.push(response);
          }

          return arr;
        }, []);
        return successes;
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.collection = function collection(options) {
    try {
      var _this11 = this;

      return Promise.resolve(_catch(function () {
        var handle = options.handle,
            locale = options.locale;
        var useLocale = locale || _this11.locale;
        var path = constructDataPath({
          type: 'collection',
          handle: handle,
          locale: useLocale
        });
        return Promise.resolve(_this11.request(path)).then(function (response) {
          if (response.success && response.data) {
            return createCollection(response.data);
          }

          throw new Error(response.error);
        });
      }, function (error) {
        if (_this11.onError) {
          return _this11.onError({
            method: 'collection',
            params: options,
            error: error
          });
        }

        throw error;
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.collectionPage = function collectionPage(options) {
    try {
      var _exit2 = false;

      var _this13 = this;

      return Promise.resolve(_catch(function () {
        function _temp2(_result2) {
          if (_exit2) return _result2;
          var handles = getListHandles(collection.productLists, {
            selectedList: list,
            paginate: typeof paginate !== 'undefined' ? paginate : false,
            index: index,
            itemsPerPage: itemsPerPage
          });
          return _this13.products({
            handles: handles,
            locale: locale
          });
        }

        var handle = options.handle,
            locale = options.locale,
            list = options.list,
            paginate = options.paginate,
            index = options.index,
            itemsPerPage = options.itemsPerPage;
        var collection = options.collection;

        var _temp = function () {
          if (typeof collection === 'undefined') {
            return function () {
              if (handle && handle.length > 0) {
                return Promise.resolve(_this13.collection({
                  handle: handle,
                  locale: locale
                })).then(function (_this12$collection) {
                  collection = _this12$collection;
                });
              } else {
                throw new Error('A collection or handle is required');
              }
            }();
          }
        }();

        return _temp && _temp.then ? _temp.then(_temp2) : _temp2(_temp);
      }, function (error) {
        if (_this13.onError) {
          return _this13.onError({
            method: 'collectionPage',
            params: options,
            error: error
          });
        }

        throw error;
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.content = function content(_ref) {
    var handle = _ref.handle,
        _ref$type = _ref.type,
        type = _ref$type === void 0 ? 'page' : _ref$type,
        locale = _ref.locale,
        _ref$blogHandle = _ref.blogHandle,
        blogHandle = _ref$blogHandle === void 0 ? 'blog' : _ref$blogHandle;

    try {
      var _this15 = this;

      return Promise.resolve(_catch(function () {
        var useLocale = locale || _this15.locale;
        var path = constructDataPath({
          type: type,
          handle: handle,
          locale: useLocale
        });

        if (type === 'article') {
          path = constructDataPath({
            type: type,
            handle: handle,
            locale: useLocale,
            parentHandle: blogHandle
          });
        }

        return Promise.resolve(_this15.request(path)).then(function (response) {
          if (response.success && response.data) {
            return createContent(response.data);
          }

          throw new Error(response.error);
        });
      }, function (error) {
        if (_this15.onError) {
          return _this15.onError({
            method: 'content',
            params: {
              handle: handle,
              type: type,
              locale: locale,
              blogHandle: blogHandle
            },
            error: error
          });
        }

        throw error;
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.page = function page(options) {
    return this.content({
      handle: options.handle,
      type: 'page',
      locale: options.locale
    });
  };

  _proto.pages = function pages(options) {
    try {
      var _this17 = this;

      var handles = options.handles,
          locale = options.locale;
      var useLocale = locale || _this17.locale;
      var requests = handles.map(function (handle) {
        return _this17.content({
          type: 'page',
          handle: handle,
          locale: useLocale
        })["catch"](function () {
          return undefined;
        });
      });
      return Promise.resolve(Promise.all(requests)).then(function (responses) {
        var successes = responses.reduce(function (arr, response) {
          if (response) {
            arr.push(response);
          }

          return arr;
        }, []);
        return successes;
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.blog = function blog(options) {
    return this.content({
      handle: options.handle,
      type: 'blog',
      locale: options.locale
    });
  };

  _proto.article = function article(options) {
    return this.content({
      handle: options.handle,
      type: 'article',
      locale: options.locale,
      blogHandle: options.blogHandle || 'blog'
    });
  };

  _proto.articles = function articles(options) {
    try {
      var _this19 = this;

      var handles = options.handles,
          locale = options.locale,
          blogHandle = options.blogHandle;
      var useLocale = locale || _this19.locale;
      var requests = handles.map(function (handle) {
        return _this19.article({
          handle: handle,
          blogHandle: blogHandle,
          locale: useLocale
        })["catch"](function () {
          return undefined;
        });
      });
      return Promise.resolve(Promise.all(requests)).then(function (responses) {
        var successes = responses.reduce(function (arr, response) {
          if (response) {
            arr.push(response);
          }

          return arr;
        }, []);
        return successes;
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.blogPage = function blogPage(options) {
    try {
      var _exit4 = false;

      var _this21 = this;

      return Promise.resolve(_catch(function () {
        function _temp4(_result4) {
          if (_exit4) return _result4;

          if (blog.articleLists) {
            var handles = getListHandles(blog.articleLists, {
              selectedList: list,
              paginate: typeof paginate !== 'undefined' ? paginate : false,
              index: index,
              itemsPerPage: itemsPerPage
            });
            return _this21.articles({
              handles: handles,
              locale: locale,
              blogHandle: handle || blog.handle
            });
          }

          return [];
        }

        var handle = options.handle,
            locale = options.locale,
            list = options.list,
            paginate = options.paginate,
            index = options.index,
            itemsPerPage = options.itemsPerPage;
        var blog = options.blog;

        var _temp3 = function () {
          if (typeof blog === 'undefined') {
            return function () {
              if (handle && handle.length > 0) {
                return Promise.resolve(_this21.blog({
                  handle: handle,
                  locale: locale
                })).then(function (_this20$blog) {
                  blog = _this20$blog;
                });
              } else {
                throw new Error('A blog or handle is required');
              }
            }();
          }
        }();

        return _temp3 && _temp3.then ? _temp3.then(_temp4) : _temp4(_temp3);
      }, function (error) {
        if (_this21.onError) {
          return _this21.onError({
            method: 'blogPage',
            params: options,
            error: error
          });
        }

        throw error;
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.space = function space() {
    try {
      var _this23 = this;

      var path = 'data/space.json';
      return Promise.resolve(_this23.request(path)).then(function (response) {
        if (response.success && response.data) {
          return createSpace(response.data);
        }

        throw new Error(response.error);
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.allProducts = function allProducts() {
    try {
      var _this25 = this;

      var path = 'data/search.json';
      return Promise.resolve(_this25.request(path)).then(function (response) {
        if (response.success && response.data && response.data.products) {
          return response.data.products.map(function (product) {
            return createProduct(product);
          });
        }

        if (response.error) {
          throw new Error(response.error);
        }

        throw new Error('Unable to get all products from search.json static file.');
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  return NacelleStaticConnector;
}(NacelleConnector);

var NacelleClient = function NacelleClient(params) {
  if (typeof params.token === 'undefined' || params.token.length === 0) {
    throw new Error('Nacelle space token is required.');
  }

  if (typeof params.id === 'undefined' || params.id.length === 0) {
    throw new Error('Nacelle space id is required.');
  }

  if (typeof params.nacelleEndpoint === 'undefined' || params.nacelleEndpoint.length === 0) {
    throw new Error('Nacelle endpoint is required');
  } // Set defaults


  this.id = params.id;
  this.token = params.token;
  this.nacelleEndpoint = params.nacelleEndpoint;
  this.useStatic = typeof params.useStatic !== 'undefined' ? params.useStatic : true;
  this.debugMode = typeof params.debugMode !== 'undefined' ? params.debugMode : false;
  this.defaultLocale = typeof params.locale !== 'undefined' ? params.locale : 'en-us'; // Set up connectors

  var dataConnector = new NacelleConnector({
    locale: this.defaultLocale
  });
  var staticConnector = new NacelleStaticConnector({
    basePath: params.staticBasePath,
    locale: this.defaultLocale
  });
  var graphQLConnector = new NacelleGraphQLConnector({
    endpoint: this.nacelleEndpoint,
    spaceId: this.id,
    token: this.token,
    locale: this.defaultLocale
  }); // Setup Data module

  if (this.useStatic) {
    dataConnector = staticConnector;
  } else {
    dataConnector = graphQLConnector;
  }

  this.data = new NacelleData({
    connector: dataConnector,
    locale: this.defaultLocale
  }); // Setup Checkout Module

  this.checkout = new NacelleCheckout({
    connector: graphQLConnector
  }); // Setup Status Module

  this.status = new NacelleStatus({
    connector: graphQLConnector
  }); // Setup Events Module

  var eventParams = {};

  if (params.eventsEndpoint) {
    eventParams.endpoint = params.eventsEndpoint;
  }

  if (params.disableEvents) {
    eventParams.disable = params.disableEvents;
  }

  this.events = new NacelleEvents(eventParams); // Setup WishList module

  var wishlistParams = {
    spaceId: this.id,
    token: this.token
  };

  if (params.wishlistEndpoint) {
    wishlistParams.endpoint = params.wishlistEndpoint;
  }

  this.wishlist = new NacelleWishlist(wishlistParams);
};

exports.HttpClientAxios = HttpClientAxios;
exports.NacelleConnector = NacelleConnector;
exports.NacelleGraphQLConnector = NacelleGraphQLConnector;
exports.NacelleStaticConnector = NacelleStaticConnector;
exports.createCollection = createCollection;
exports.createContent = createContent;
exports.createItemList = createItemList;
exports.createMedia = createMedia;
exports.createProduct = createProduct;
exports.default = NacelleClient;
//# sourceMappingURL=client-js-sdk.cjs.development.js.map
