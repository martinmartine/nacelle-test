import { NacelleConnector, NacelleConnectorParams } from '../nacelleConnector';
import { FetchProductParams, FetchProductsParams, FetchCollectionParams, FetchCollectionPageParams, FetchContentParams, FetchPageParams, FetchPagesParams, FetchBlogParams, FetchArticleParams, FetchArticlesParams, FetchBlogPageParams } from '../interfaces/parameters';
import { Product } from '../../objects/product';
import { Collection } from '../../objects/collection';
import { Content } from '../../objects/content';
import { Space } from '../../objects/space';
export interface NacelleStaticConnectorParams extends NacelleConnectorParams {
    basePath?: string;
}
export interface NacellStaticRequestResponse<T> {
    success: boolean;
    data: T | null;
    error?: string;
}
export interface SearchStaticResponse {
    products: Product[];
    [key: string]: any;
}
interface OnErrorParams {
    method: string;
    params: any;
    error: Error;
}
interface OnError {
    <T>(options: OnErrorParams): Promise<T> | T;
}
export default class NacelleStaticConnector extends NacelleConnector {
    basePath: string;
    onError?: OnError;
    constructor(params?: NacelleStaticConnectorParams);
    request<T>(path: string): Promise<NacellStaticRequestResponse<T>>;
    requestMany<T>(paths: string[]): Promise<T[]>;
    product(options: FetchProductParams): Promise<Product>;
    products(options: FetchProductsParams): Promise<Product[]>;
    collection(options: FetchCollectionParams): Promise<Collection>;
    collectionPage(options: FetchCollectionPageParams): Promise<Product[]>;
    content({ handle, type, locale, blogHandle, }: FetchContentParams): Promise<Content>;
    page(options: FetchPageParams): Promise<Content>;
    pages(options: FetchPagesParams): Promise<Content[]>;
    blog(options: FetchBlogParams): Promise<Content>;
    article(options: FetchArticleParams): Promise<Content>;
    articles(options: FetchArticlesParams): Promise<Content[]>;
    blogPage(options: FetchBlogPageParams): Promise<Content[]>;
    space(): Promise<Space>;
    allProducts(): Promise<Product[]>;
}
export {};
