import { NacelleConnector, NacelleConnectorParams } from '../nacelleConnector';
import { FetchProductParams, FetchProductsParams, FetchCollectionParams, FetchCollectionPageParams, FetchContentParams, FetchPageParams, FetchPagesParams, FetchBlogParams, FetchArticleParams, FetchArticlesParams, FetchBlogPageParams } from '../interfaces/parameters';
import { Product } from '../../objects/product';
import { Collection } from '../../objects/collection';
import { Content } from '../../objects/content';
import { Space } from '../../objects/space';
import { CartItem, Checkout, CheckoutMetafield } from '../../objects/checkout';
export interface NacelleGraphQLConnectorParams extends NacelleConnectorParams {
    endpoint: string;
    spaceId: string;
    token: string;
}
export interface NacelleGraphQLRequestResponse<T> {
    success: boolean;
    data: T | null;
    error?: string;
}
export interface ProcessCheckoutParams {
    cartItems: CartItem[];
    checkoutId: string;
    metafields: CheckoutMetafield[];
    note: string;
}
export default class NacelleGraphQLConnector extends NacelleConnector {
    endpoint: string;
    spaceId: string;
    token: string;
    constructor(params: NacelleGraphQLConnectorParams);
    request<T>(query: string, queryName: string, variables?: any): Promise<NacelleGraphQLRequestResponse<T>>;
    getAllPageItems<T>(params: {
        query: string;
        queryName: string;
        first?: number;
    }): Promise<Array<T>>;
    product(options: FetchProductParams): Promise<Product>;
    products(options: FetchProductsParams): Promise<Product[]>;
    collection(options: FetchCollectionParams): Promise<Collection>;
    collectionPage(options: FetchCollectionPageParams): Promise<Product[]>;
    content({ handle, type, locale, blogHandle, }: FetchContentParams): Promise<Content>;
    page(options: FetchPageParams): Promise<Content>;
    pages(options: FetchPagesParams): Promise<Content[]>;
    blog(options: FetchBlogParams): Promise<Content>;
    article(options: FetchArticleParams): Promise<Content>;
    articles(options: FetchArticlesParams): Promise<Content[]>;
    blogPage(options: FetchBlogPageParams): Promise<Content[]>;
    allProducts(params?: {
        limit?: number;
    }): Promise<Product[]>;
    allCollections(params?: {
        limit?: number;
    }): Promise<Collection[]>;
    allContent(params?: {
        limit?: number;
    }): Promise<Content[]>;
    space(): Promise<Space>;
    processCheckout(params: ProcessCheckoutParams): Promise<Checkout>;
    queryCheckout(params: {
        id: string;
        url: string;
    }): Promise<Checkout>;
    isVariantAvailable(params: {
        productId: string;
        variantId: string;
    }): Promise<boolean>;
}
