import { NacelleConnector } from '../connectors/nacelleConnector';
import { FetchProductParams, FetchProductsParams, FetchCollectionParams, FetchCollectionPageParams, FetchContentParams, FetchPageParams, FetchPagesParams, FetchArticleParams, FetchArticlesParams, FetchBlogParams, FetchBlogPageParams } from '../connectors/interfaces/parameters';
import { Product } from '../objects/product';
import { Collection } from '../objects/collection';
import { Content } from '../objects/content';
import { Space } from '../objects/space';
export interface NacelleDataParams {
    connector: NacelleConnector;
    locale?: string;
    currencyCode?: string;
    onDataError?: <T>(options: OnDataErrorParams) => Promise<T> | T;
}
export interface NacelleDataUpdateParams {
    connector?: NacelleConnector;
    locale?: string;
    currencyCode?: string;
    onDataError?: <T>(options: OnDataErrorParams) => Promise<T> | T;
}
interface AfterSubscription {
    method: string;
    callback: <T>(responseObj: T) => Promise<T> | T;
}
interface OnDataErrorParams {
    method: string;
    params: any;
    error: Error;
}
interface OnDataError {
    <T>(options: OnDataErrorParams): Promise<T> | T;
}
export default class NacelleData {
    connector: NacelleConnector;
    locale: string;
    currencyCode: string;
    afterSubscriptions: AfterSubscription[];
    onDataError: OnDataError | null;
    constructor(params: NacelleDataParams);
    update(params: NacelleDataUpdateParams): void;
    product(params: FetchProductParams, connector?: NacelleConnector): Promise<Product>;
    products(params: FetchProductsParams, connector?: NacelleConnector): Promise<Product[]>;
    collection(params: FetchCollectionParams, connector?: NacelleConnector): Promise<Collection>;
    collectionPage(params: FetchCollectionPageParams, connector?: NacelleConnector): Promise<Product[]>;
    content(params: FetchContentParams, connector?: NacelleConnector): Promise<Content>;
    page(params: FetchPageParams, connector?: NacelleConnector): Promise<Content>;
    pages(params: FetchPagesParams, connector?: NacelleConnector): Promise<Content[]>;
    article(params: FetchArticleParams, connector?: NacelleConnector): Promise<Content>;
    articles(params: FetchArticlesParams, connector?: NacelleConnector): Promise<Content[]>;
    blog(params: FetchBlogParams, connector?: NacelleConnector): Promise<Content>;
    blogPage(params: FetchBlogPageParams, connector?: NacelleConnector): Promise<Content[]>;
    space(connector?: NacelleConnector): Promise<Space>;
    allProducts(params?: {
        limit?: number;
    }, connector?: NacelleConnector): Promise<Product[]>;
    allCollections(params?: {
        limit?: number;
    }, connector?: NacelleConnector): Promise<Collection[]>;
    allContent(params?: {
        limit?: number;
    }, connector?: NacelleConnector): Promise<Content[]>;
    after(method: string, callback: <T>(responseObj: T) => Promise<T> | T): void;
    private applyAfter;
}
export {};
