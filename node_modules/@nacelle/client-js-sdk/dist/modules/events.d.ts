import HttpClient from '../util/http/HttpClient';
export interface NacelleEventsParams {
    endpoint?: string;
    httpClient?: HttpClient;
    disable?: boolean;
}
export interface EventSubscription {
    eventType: string;
    callback: (event: EventObject) => EventObject | null;
}
export interface EventInput {
    eventType: EventType | string;
    spaceId: string;
    url?: string;
    metafields?: string[];
    value?: MonetaryValue;
    cart?: CartItem[];
    user?: User;
    [key: string]: any;
}
export interface EventUrl {
    url?: string;
    domain: string;
    route: string;
    urlParams?: string[];
}
export interface GlobalEventData {
    sessionEventCount?: number;
    attributionType?: EventType | string;
    attributionData?: Record<string, unknown>;
}
export interface EventObject extends EventInput, EventUrl, GlobalEventData {
}
export interface CartItem {
    productId: string;
    variantHandle: string;
    value: MonetaryValue;
}
/**
 * Monetary value of an event
 * @property {number} amount - Amount in cents. Example: 3599 to represent $35.99
 * @property {string} currency - Currency string. Example: 'USD'
 */
export interface MonetaryValue {
    amount: number;
    currency: string;
}
export interface User {
    id?: string;
    anonymousId?: string;
    device?: string;
    ip?: string;
    email?: string;
    phone?: string;
}
export declare enum EventType {
    productView = "productView",
    search = "search",
    productRecommendation = "productRecommendation",
    pageView = "pageView",
    collectionView = "collectionView",
    blogView = "blogView",
    articleView = "articleView",
    cartAdd = "cartAdd",
    cartRemove = "cartRemove",
    checkoutInit = "checkoutInit",
    checkoutComplete = "checkoutComplete"
}
export default class NacelleEvents {
    endpoint: string;
    apiClient: HttpClient;
    disable: boolean;
    subscriptions: EventSubscription[];
    attributionEvents: {
        [key: string]: (attributionEvent: EventObject) => Record<string, unknown>;
    };
    constructor(params?: NacelleEventsParams);
    log(eventInput: EventInput): void;
    onAttributionEvent(eventType: string, getAttributionData: (event: EventObject) => Record<string, unknown>): void;
    onEvent(eventType: string, callback: (event: EventObject) => EventObject): void;
}
